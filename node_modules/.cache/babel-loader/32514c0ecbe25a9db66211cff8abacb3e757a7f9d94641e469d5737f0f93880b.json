{"ast":null,"code":"var _jsxFileName = \"/workspaces/ToDoList/src/App.js\",\n  _s = $RefreshSig$();\n// App.js\nimport React, { useState, useEffect, useRef } from \"react\";\nimport ContextMenu from \"./ContextMenu\";\nimport './todo.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [mytext, setMytext] = useState(\"\");\n  const [myarray, setMyarray] = useState([]);\n  const [editIdx, setEditIdx] = useState(\"\");\n  const [contextMenuIndex, setContextMenuIndex] = useState(null);\n  const [contextMenuPosition, setContextMenuPosition] = useState({\n    x: 0,\n    y: 0\n  });\n  const contextMenuRef = useRef(null);\n\n  // Load data from localStorage on component mount\n  useEffect(() => {\n    const storedData = localStorage.getItem(\"todoList\");\n    document.querySelector('.to-do_textbox').focus();\n    if (storedData) {\n      setMyarray(JSON.parse(storedData));\n    }\n  }, []);\n\n  // Save data to localStorage whenever myarray changes\n  useEffect(() => {\n    localStorage.setItem(\"todoList\", JSON.stringify(myarray));\n  }, [myarray]);\n  function onChangeDo(event) {\n    setMytext(event.target.value);\n  }\n  function removeAll() {\n    setMyarray([]);\n  }\n  function onClickAdd() {\n    document.querySelector('.to-do_textbox').focus();\n    if (mytext.trim() === \"\") {\n      // Display a warning message or handle the empty text case\n      alert(\"Please enter a value.\");\n      return;\n    }\n\n    // Add the text to the array\n    setMyarray([...myarray, mytext]);\n\n    // Reset text input and edit index\n    setMytext(\"\");\n    setEditIdx(\"\");\n  }\n  function removeItem(index) {\n    const updatedArray = myarray.filter((_, idx) => idx !== index);\n    setMyarray(updatedArray);\n  }\n  function editItem(index) {\n    setMytext(myarray[index]);\n    setEditIdx(index);\n    document.querySelector('.to-do_textbox').focus();\n  }\n  function handleContextMenu(event, index) {\n    event.preventDefault();\n    setContextMenuIndex(index);\n    setContextMenuPosition({\n      x: event.pageX,\n      y: event.pageY\n    });\n  }\n  function handleClickOutside(event) {\n    if (contextMenuRef.current && !contextMenuRef.current.contains(event.target)) {\n      setContextMenuIndex(null);\n    }\n  }\n  useEffect(() => {\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"body\",\n    children: /*#__PURE__*/_jsxDEV(\"center\", {\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"txt\",\n        placeholder: \"Enter something...\",\n        value: mytext,\n        onChange: onChangeDo,\n        autoComplete: \"off\",\n        className: \"to-do_textbox\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), \"\\xA0\", /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"to-do_button\",\n        onClick: onClickAdd,\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"to-do_table\",\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: myarray.map((value, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              className: \"to-do_item\",\n              onContextMenu: e => handleContextMenu(e, index),\n              children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [index + 1, \". \\xA0\\xA0\", value]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 19\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), myarray.length >= 5 && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: removeAll,\n        className: \"to-do_button\",\n        children: \"Remove All\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 33\n      }, this), /*#__PURE__*/_jsxDEV(ContextMenu, {\n        isVisible: contextMenuIndex !== null,\n        x: contextMenuPosition.x,\n        y: contextMenuPosition.y,\n        onEdit: () => editItem(contextMenuIndex),\n        onDelete: () => removeItem(contextMenuIndex),\n        ref: contextMenuRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"4wNp4xfOP3lH1IkcY+NBZhflS24=\");\n_c = App;\nexport default App;\n\n// // App.js\n// import React, { useState, useEffect } from \"react\";\n// import './todo.css';\n\n// function App() {\n//   const [mytext, setMytext] = useState(\"\");\n//   const [myarray, setMyarray] = useState([]);\n//   const [editIdx, setEditIdx] = useState(\"\");\n\n//   // Load data from localStorage on component mount\n//   useEffect(() => {\n//     const storedData = localStorage.getItem(\"todoList\");\n//     document.querySelector('.to-do_textbox').focus();\n//     if (storedData) {\n//       setMyarray(JSON.parse(storedData));\n//     }\n//   }, []);\n\n//   // Save data to localStorage whenever myarray changes\n//   useEffect(() => {\n//     localStorage.setItem(\"todoList\", JSON.stringify(myarray));\n//   }, [myarray]);\n\n//   function onChangeDo(event) {\n//     setMytext(event.target.value);\n//   }\n\n//   function removeAll() {\n//     setMyarray([]);\n//   }\n\n//   function onClickAdd() {\n//     document.querySelector('.to-do_textbox').focus();\n//     if (mytext.trim() === \"\") {\n//       // Display a warning message or handle the empty text case\n//       alert(\"Please enter a value.\");\n//       return;\n//     }\n\n//     // Add the text to the array\n//     setMyarray([...myarray, mytext]);\n\n//     // Reset text input and edit index\n//     setMytext(\"\");\n//     setEditIdx(\"\");\n//   }\n\n//   function removeItem(index) {\n//     const updatedArray = myarray.filter((_, idx) => idx !== index);\n//     setMyarray(updatedArray);\n//   }\n\n//   function editItem(index) {\n//     setMytext(myarray[index]);\n//     setEditIdx(index);\n//     document.querySelector('.to-do_textbox').focus();\n//   }\n\n//   return (\n//     <div className=\"body\">\n//       <center>\n//         <br />\n//         <input type=\"text\" name=\"txt\" placeholder=\"Enter something...\" value={mytext} onChange={onChangeDo} autoComplete=\"off\" className=\"to-do_textbox\" />\n//         &nbsp;\n//         <button className=\"to-do_button\" onClick={onClickAdd} >Add</button>\n//         <br /><br />\n//         <b>\n//           <table className=\"to-do_table\">\n//             <tbody>\n//               {myarray.map((value, index) => (\n//                 <tr key={index} className=\"to-do_item\">\n//                   <br/>\n//                   <td>\n//                     {index + 1}. &nbsp;&nbsp;{value}\n//                   </td>\n//                   <td className=\"action_buttons\">\n//                     <img src=\"Edit.png\" alt=\"edit\" title=\"Edit this Text\" onClick={() => editItem(index)} height=\"20\" width=\"20\" />\n//                   </td>\n//                   <td className=\"action_buttons\">\n//                     <img src=\"Delete.png\" alt=\"delete\" title=\"Delete this Text\" onClick={() => removeItem(index)} height=\"20\" width=\"20\" />\n//                   </td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//           </table>\n//         </b>\n//         <br/>\n//         {myarray.length >= 5 && <button onClick={removeAll} className=\"to-do_button\">Remove All</button>}\n//       </center>\n//     </div>\n//   );\n// }\n\n// export default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","ContextMenu","App","mytext","setMytext","myarray","setMyarray","editIdx","setEditIdx","contextMenuIndex","setContextMenuIndex","contextMenuPosition","setContextMenuPosition","x","y","contextMenuRef","storedData","localStorage","getItem","document","querySelector","focus","JSON","parse","setItem","stringify","onChangeDo","event","target","value","removeAll","onClickAdd","trim","alert","removeItem","index","updatedArray","filter","_","idx","editItem","handleContextMenu","preventDefault","pageX","pageY","handleClickOutside","current","contains","addEventListener","removeEventListener","map","e","length"],"sources":["/workspaces/ToDoList/src/App.js"],"sourcesContent":["// App.js\nimport React, { useState, useEffect, useRef } from \"react\";\nimport ContextMenu from \"./ContextMenu\";\nimport './todo.css';\n\nfunction App() {\n  const [mytext, setMytext] = useState(\"\");\n  const [myarray, setMyarray] = useState([]);\n  const [editIdx, setEditIdx] = useState(\"\");\n  const [contextMenuIndex, setContextMenuIndex] = useState(null);\n  const [contextMenuPosition, setContextMenuPosition] = useState({ x: 0, y: 0 });\n  const contextMenuRef = useRef(null);\n\n  // Load data from localStorage on component mount\n  useEffect(() => {\n    const storedData = localStorage.getItem(\"todoList\");\n    document.querySelector('.to-do_textbox').focus();\n    if (storedData) {\n      setMyarray(JSON.parse(storedData));\n    }\n  }, []);\n\n  // Save data to localStorage whenever myarray changes\n  useEffect(() => {\n    localStorage.setItem(\"todoList\", JSON.stringify(myarray));\n  }, [myarray]);\n\n  function onChangeDo(event) {\n    setMytext(event.target.value);\n  }\n\n  function removeAll() {\n    setMyarray([]);\n  }\n\n  function onClickAdd() {\n    document.querySelector('.to-do_textbox').focus();\n    if (mytext.trim() === \"\") {\n      // Display a warning message or handle the empty text case\n      alert(\"Please enter a value.\");\n      return;\n    }\n  \n    // Add the text to the array\n    setMyarray([...myarray, mytext]);\n    \n    // Reset text input and edit index\n    setMytext(\"\");\n    setEditIdx(\"\");\n  }\n\n  function removeItem(index) {\n    const updatedArray = myarray.filter((_, idx) => idx !== index);\n    setMyarray(updatedArray);\n  }\n\n  function editItem(index) {\n    setMytext(myarray[index]);\n    setEditIdx(index);\n    document.querySelector('.to-do_textbox').focus();\n  }\n\n  function handleContextMenu(event, index) {\n    event.preventDefault();\n    setContextMenuIndex(index);\n    setContextMenuPosition({ x: event.pageX, y: event.pageY });\n  }\n\n  function handleClickOutside(event) {\n    if (contextMenuRef.current && !contextMenuRef.current.contains(event.target)) {\n      setContextMenuIndex(null);\n    }\n  }\n\n  useEffect(() => {\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, []);\n\n  return (\n    <div className=\"body\">\n      <center>\n        <br />\n        <input type=\"text\" name=\"txt\" placeholder=\"Enter something...\" value={mytext} onChange={onChangeDo} autoComplete=\"off\" className=\"to-do_textbox\" />\n        &nbsp;\n        <button className=\"to-do_button\" onClick={onClickAdd} >Add</button>\n        <br /><br />\n        <b>\n          <table className=\"to-do_table\">\n            <tbody>\n              {myarray.map((value, index) => (\n                <tr key={index} className=\"to-do_item\" onContextMenu={(e) => handleContextMenu(e, index)}>\n                  <br/>\n                  <td>\n                    {index + 1}. &nbsp;&nbsp;{value}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </b>\n        <br/>\n        {myarray.length >= 5 && <button onClick={removeAll} className=\"to-do_button\">Remove All</button>}\n        <ContextMenu\n          isVisible={contextMenuIndex !== null}\n          x={contextMenuPosition.x}\n          y={contextMenuPosition.y}\n          onEdit={() => editItem(contextMenuIndex)}\n          onDelete={() => removeItem(contextMenuIndex)}\n          ref={contextMenuRef}\n        />\n      </center>\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n// // App.js\n// import React, { useState, useEffect } from \"react\";\n// import './todo.css';\n\n// function App() {\n//   const [mytext, setMytext] = useState(\"\");\n//   const [myarray, setMyarray] = useState([]);\n//   const [editIdx, setEditIdx] = useState(\"\");\n\n//   // Load data from localStorage on component mount\n//   useEffect(() => {\n//     const storedData = localStorage.getItem(\"todoList\");\n//     document.querySelector('.to-do_textbox').focus();\n//     if (storedData) {\n//       setMyarray(JSON.parse(storedData));\n//     }\n//   }, []);\n\n//   // Save data to localStorage whenever myarray changes\n//   useEffect(() => {\n//     localStorage.setItem(\"todoList\", JSON.stringify(myarray));\n//   }, [myarray]);\n\n//   function onChangeDo(event) {\n//     setMytext(event.target.value);\n//   }\n\n//   function removeAll() {\n//     setMyarray([]);\n//   }\n\n//   function onClickAdd() {\n//     document.querySelector('.to-do_textbox').focus();\n//     if (mytext.trim() === \"\") {\n//       // Display a warning message or handle the empty text case\n//       alert(\"Please enter a value.\");\n//       return;\n//     }\n  \n//     // Add the text to the array\n//     setMyarray([...myarray, mytext]);\n    \n//     // Reset text input and edit index\n//     setMytext(\"\");\n//     setEditIdx(\"\");\n//   }\n\n//   function removeItem(index) {\n//     const updatedArray = myarray.filter((_, idx) => idx !== index);\n//     setMyarray(updatedArray);\n//   }\n\n//   function editItem(index) {\n//     setMytext(myarray[index]);\n//     setEditIdx(index);\n//     document.querySelector('.to-do_textbox').focus();\n//   }\n\n//   return (\n//     <div className=\"body\">\n//       <center>\n//         <br />\n//         <input type=\"text\" name=\"txt\" placeholder=\"Enter something...\" value={mytext} onChange={onChangeDo} autoComplete=\"off\" className=\"to-do_textbox\" />\n//         &nbsp;\n//         <button className=\"to-do_button\" onClick={onClickAdd} >Add</button>\n//         <br /><br />\n//         <b>\n//           <table className=\"to-do_table\">\n//             <tbody>\n//               {myarray.map((value, index) => (\n//                 <tr key={index} className=\"to-do_item\">\n//                   <br/>\n//                   <td>\n//                     {index + 1}. &nbsp;&nbsp;{value}\n//                   </td>\n//                   <td className=\"action_buttons\">\n//                     <img src=\"Edit.png\" alt=\"edit\" title=\"Edit this Text\" onClick={() => editItem(index)} height=\"20\" width=\"20\" />\n//                   </td>\n//                   <td className=\"action_buttons\">\n//                     <img src=\"Delete.png\" alt=\"delete\" title=\"Delete this Text\" onClick={() => removeItem(index)} height=\"20\" width=\"20\" />\n//                   </td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//           </table>\n//         </b>\n//         <br/>\n//         {myarray.length >= 5 && <button onClick={removeAll} className=\"to-do_button\">Remove All</button>}\n//       </center>\n//     </div>\n//   );\n// }\n\n// export default App;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAO,YAAY;AAAC;AAEpB,SAASC,GAAG,GAAG;EAAA;EACb,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACW,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAC9D,MAAM,CAACa,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGd,QAAQ,CAAC;IAAEe,CAAC,EAAE,CAAC;IAAEC,CAAC,EAAE;EAAE,CAAC,CAAC;EAC9E,MAAMC,cAAc,GAAGf,MAAM,CAAC,IAAI,CAAC;;EAEnC;EACAD,SAAS,CAAC,MAAM;IACd,MAAMiB,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IACnDC,QAAQ,CAACC,aAAa,CAAC,gBAAgB,CAAC,CAACC,KAAK,EAAE;IAChD,IAAIL,UAAU,EAAE;MACdV,UAAU,CAACgB,IAAI,CAACC,KAAK,CAACP,UAAU,CAAC,CAAC;IACpC;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAjB,SAAS,CAAC,MAAM;IACdkB,YAAY,CAACO,OAAO,CAAC,UAAU,EAAEF,IAAI,CAACG,SAAS,CAACpB,OAAO,CAAC,CAAC;EAC3D,CAAC,EAAE,CAACA,OAAO,CAAC,CAAC;EAEb,SAASqB,UAAU,CAACC,KAAK,EAAE;IACzBvB,SAAS,CAACuB,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EAC/B;EAEA,SAASC,SAAS,GAAG;IACnBxB,UAAU,CAAC,EAAE,CAAC;EAChB;EAEA,SAASyB,UAAU,GAAG;IACpBZ,QAAQ,CAACC,aAAa,CAAC,gBAAgB,CAAC,CAACC,KAAK,EAAE;IAChD,IAAIlB,MAAM,CAAC6B,IAAI,EAAE,KAAK,EAAE,EAAE;MACxB;MACAC,KAAK,CAAC,uBAAuB,CAAC;MAC9B;IACF;;IAEA;IACA3B,UAAU,CAAC,CAAC,GAAGD,OAAO,EAAEF,MAAM,CAAC,CAAC;;IAEhC;IACAC,SAAS,CAAC,EAAE,CAAC;IACbI,UAAU,CAAC,EAAE,CAAC;EAChB;EAEA,SAAS0B,UAAU,CAACC,KAAK,EAAE;IACzB,MAAMC,YAAY,GAAG/B,OAAO,CAACgC,MAAM,CAAC,CAACC,CAAC,EAAEC,GAAG,KAAKA,GAAG,KAAKJ,KAAK,CAAC;IAC9D7B,UAAU,CAAC8B,YAAY,CAAC;EAC1B;EAEA,SAASI,QAAQ,CAACL,KAAK,EAAE;IACvB/B,SAAS,CAACC,OAAO,CAAC8B,KAAK,CAAC,CAAC;IACzB3B,UAAU,CAAC2B,KAAK,CAAC;IACjBhB,QAAQ,CAACC,aAAa,CAAC,gBAAgB,CAAC,CAACC,KAAK,EAAE;EAClD;EAEA,SAASoB,iBAAiB,CAACd,KAAK,EAAEQ,KAAK,EAAE;IACvCR,KAAK,CAACe,cAAc,EAAE;IACtBhC,mBAAmB,CAACyB,KAAK,CAAC;IAC1BvB,sBAAsB,CAAC;MAAEC,CAAC,EAAEc,KAAK,CAACgB,KAAK;MAAE7B,CAAC,EAAEa,KAAK,CAACiB;IAAM,CAAC,CAAC;EAC5D;EAEA,SAASC,kBAAkB,CAAClB,KAAK,EAAE;IACjC,IAAIZ,cAAc,CAAC+B,OAAO,IAAI,CAAC/B,cAAc,CAAC+B,OAAO,CAACC,QAAQ,CAACpB,KAAK,CAACC,MAAM,CAAC,EAAE;MAC5ElB,mBAAmB,CAAC,IAAI,CAAC;IAC3B;EACF;EAEAX,SAAS,CAAC,MAAM;IACdoB,QAAQ,CAAC6B,gBAAgB,CAAC,WAAW,EAAEH,kBAAkB,CAAC;IAC1D,OAAO,MAAM;MACX1B,QAAQ,CAAC8B,mBAAmB,CAAC,WAAW,EAAEJ,kBAAkB,CAAC;IAC/D,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,oBACE;IAAK,SAAS,EAAC,MAAM;IAAA,uBACnB;MAAA,wBACE;QAAA;QAAA;QAAA;MAAA,QAAM,eACN;QAAO,IAAI,EAAC,MAAM;QAAC,IAAI,EAAC,KAAK;QAAC,WAAW,EAAC,oBAAoB;QAAC,KAAK,EAAE1C,MAAO;QAAC,QAAQ,EAAEuB,UAAW;QAAC,YAAY,EAAC,KAAK;QAAC,SAAS,EAAC;MAAe;QAAA;QAAA;QAAA;MAAA,QAAG,QAEnJ;QAAQ,SAAS,EAAC,cAAc;QAAC,OAAO,EAAEK,UAAW;QAAA,UAAE;MAAG;QAAA;QAAA;QAAA;MAAA,QAAS,eACnE;QAAA;QAAA;QAAA;MAAA,QAAM;QAAA;QAAA;QAAA;MAAA,QAAM,eACZ;QAAA,uBACE;UAAO,SAAS,EAAC,aAAa;UAAA,uBAC5B;YAAA,UACG1B,OAAO,CAAC6C,GAAG,CAAC,CAACrB,KAAK,EAAEM,KAAK,kBACxB;cAAgB,SAAS,EAAC,YAAY;cAAC,aAAa,EAAGgB,CAAC,IAAKV,iBAAiB,CAACU,CAAC,EAAEhB,KAAK,CAAE;cAAA,wBACvF;gBAAA;gBAAA;gBAAA;cAAA,QAAK,eACL;gBAAA,WACGA,KAAK,GAAG,CAAC,EAAC,YAAc,EAACN,KAAK;cAAA;gBAAA;gBAAA;gBAAA;cAAA,QAC5B;YAAA,GAJEM,KAAK;cAAA;cAAA;cAAA;YAAA,QAMf;UAAC;YAAA;YAAA;YAAA;UAAA;QACI;UAAA;UAAA;UAAA;QAAA;MACF;QAAA;QAAA;QAAA;MAAA,QACN,eACJ;QAAA;QAAA;QAAA;MAAA,QAAK,EACJ9B,OAAO,CAAC+C,MAAM,IAAI,CAAC,iBAAI;QAAQ,OAAO,EAAEtB,SAAU;QAAC,SAAS,EAAC,cAAc;QAAA,UAAC;MAAU;QAAA;QAAA;QAAA;MAAA,QAAS,eAChG,QAAC,WAAW;QACV,SAAS,EAAErB,gBAAgB,KAAK,IAAK;QACrC,CAAC,EAAEE,mBAAmB,CAACE,CAAE;QACzB,CAAC,EAAEF,mBAAmB,CAACG,CAAE;QACzB,MAAM,EAAE,MAAM0B,QAAQ,CAAC/B,gBAAgB,CAAE;QACzC,QAAQ,EAAE,MAAMyB,UAAU,CAACzB,gBAAgB,CAAE;QAC7C,GAAG,EAAEM;MAAe;QAAA;QAAA;QAAA;MAAA,QACpB;IAAA;MAAA;MAAA;MAAA;IAAA;EACK;IAAA;IAAA;IAAA;EAAA,QACL;AAEV;AAAC,GA/GQb,GAAG;AAAA,KAAHA,GAAG;AAiHZ,eAAeA,GAAG;;AAIlB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}