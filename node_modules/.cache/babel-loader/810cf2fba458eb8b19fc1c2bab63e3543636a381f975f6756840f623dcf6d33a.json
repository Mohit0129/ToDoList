{"ast":null,"code":"\n\n// // App.js\n// import React, { useState, useEffect } from \"react\";\n// import './todo.css';\n\n// function App() {\n//   const [mytext, setMytext] = useState(\"\");\n//   const [myarray, setMyarray] = useState([]);\n//   const [editIdx, setEditIdx] = useState(\"\");\n\n//   // Load data from localStorage on component mount\n//   useEffect(() => {\n//     const storedData = localStorage.getItem(\"todoList\");\n//     document.querySelector('.to-do_textbox').focus();\n//     if (storedData) {\n//       setMyarray(JSON.parse(storedData));\n//     }\n//   }, []);\n\n//   // Save data to localStorage whenever myarray changes\n//   useEffect(() => {\n//     localStorage.setItem(\"todoList\", JSON.stringify(myarray));\n//   }, [myarray]);\n\n//   function onChangeDo(event) {\n//     setMytext(event.target.value);\n//   }\n\n//   function onClickAdd() {\n//     document.querySelector('.to-do_textbox').focus();\n//     if (mytext.trim() === \"\") {\n//       // Display a warning message or handle the empty text case\n//       alert(\"Please enter a value.\");\n//       return;\n//     }\n\n//     // Add the text to the array\n//     setMyarray([...myarray, mytext]);\n\n//     // Reset text input and edit index\n//     setMytext(\"\");\n//     setEditIdx(\"\");\n//   }\n\n//   function removeItem(index) {\n//     const updatedArray = myarray.filter((_, idx) => idx !== index);\n//     setMyarray(updatedArray);\n//   }\n\n//   function editItem(index) {\n//     setMytext(myarray[index]);\n//     setEditIdx(index);\n//   }\n\n//   return (\n//     <div className=\"body\">\n//       <center>\n//         <br />\n//         <input type=\"text\" name=\"txt\" placeholder=\"Enter something...\" value={mytext} onChange={onChangeDo} autoComplete=\"off\" className=\"to-do_textbox\" />\n//         &nbsp;\n//         <button className=\"to-do_button\" onClick={onClickAdd} >Add</button>\n//         <br /><br />\n//         <b>\n//           <table className=\"to-do_table\">\n//             <tbody>\n//               {myarray.map((value, index) => (\n//                 <tr key={index} className=\"to-do_item\">\n//                   <br/>\n//                   <td>\n//                     {index + 1}.  {value}\n//                   </td>\n//                   <td className=\"action_buttons\">\n//                     <img src=\"Edit.png\" alt=\"edit\" title=\"Edit this Text\" onClick={() => editItem(index)} height=\"20\" width=\"20\" />\n//                   </td>\n//                   <td className=\"action_buttons\">\n//                     <img src=\"Delete.png\" alt=\"delete\" title=\"Delete this Text\" onClick={() => removeItem(index)} height=\"20\" width=\"20\" />\n//                   </td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//           </table>\n//         </b>\n//       </center>\n//     </div>\n//   );\n// }\n\n// export default App;","map":{"version":3,"names":[],"sources":["/workspaces/ToDoList/src/App.js"],"sourcesContent":["\n\n// // App.js\n// import React, { useState, useEffect } from \"react\";\n// import './todo.css';\n\n// function App() {\n//   const [mytext, setMytext] = useState(\"\");\n//   const [myarray, setMyarray] = useState([]);\n//   const [editIdx, setEditIdx] = useState(\"\");\n\n//   // Load data from localStorage on component mount\n//   useEffect(() => {\n//     const storedData = localStorage.getItem(\"todoList\");\n//     document.querySelector('.to-do_textbox').focus();\n//     if (storedData) {\n//       setMyarray(JSON.parse(storedData));\n//     }\n//   }, []);\n\n//   // Save data to localStorage whenever myarray changes\n//   useEffect(() => {\n//     localStorage.setItem(\"todoList\", JSON.stringify(myarray));\n//   }, [myarray]);\n\n//   function onChangeDo(event) {\n//     setMytext(event.target.value);\n//   }\n\n//   function onClickAdd() {\n//     document.querySelector('.to-do_textbox').focus();\n//     if (mytext.trim() === \"\") {\n//       // Display a warning message or handle the empty text case\n//       alert(\"Please enter a value.\");\n//       return;\n//     }\n  \n//     // Add the text to the array\n//     setMyarray([...myarray, mytext]);\n    \n//     // Reset text input and edit index\n//     setMytext(\"\");\n//     setEditIdx(\"\");\n//   }\n\n//   function removeItem(index) {\n//     const updatedArray = myarray.filter((_, idx) => idx !== index);\n//     setMyarray(updatedArray);\n//   }\n\n//   function editItem(index) {\n//     setMytext(myarray[index]);\n//     setEditIdx(index);\n//   }\n\n//   return (\n//     <div className=\"body\">\n//       <center>\n//         <br />\n//         <input type=\"text\" name=\"txt\" placeholder=\"Enter something...\" value={mytext} onChange={onChangeDo} autoComplete=\"off\" className=\"to-do_textbox\" />\n//         &nbsp;\n//         <button className=\"to-do_button\" onClick={onClickAdd} >Add</button>\n//         <br /><br />\n//         <b>\n//           <table className=\"to-do_table\">\n//             <tbody>\n//               {myarray.map((value, index) => (\n//                 <tr key={index} className=\"to-do_item\">\n//                   <br/>\n//                   <td>\n//                     {index + 1}.  {value}\n//                   </td>\n//                   <td className=\"action_buttons\">\n//                     <img src=\"Edit.png\" alt=\"edit\" title=\"Edit this Text\" onClick={() => editItem(index)} height=\"20\" width=\"20\" />\n//                   </td>\n//                   <td className=\"action_buttons\">\n//                     <img src=\"Delete.png\" alt=\"delete\" title=\"Delete this Text\" onClick={() => removeItem(index)} height=\"20\" width=\"20\" />\n//                   </td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//           </table>\n//         </b>\n//       </center>\n//     </div>\n//   );\n// }\n\n// export default App;\n"],"mappings":";;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}