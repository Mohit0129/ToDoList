{"ast":null,"code":"var _jsxFileName = \"/workspaces/ToDoList/src/App.js\",\n  _s = $RefreshSig$();\n// App.js\n\nimport React, { useState, useEffect } from \"react\";\nimport './todo.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [mytext, setMytext] = useState(\"\");\n  const [myarray, setMyarray] = useState([]);\n  const [editIdx, setEditIdx] = useState(\"\");\n  const colors = [\"lightred\", \"lightgreen\", \"lightblue\", \"lightpink\", \"lightyellow\", \"lightcyan\"]; // Define an array of colors\n\n  // Load data from localStorage on component mount\n  useEffect(() => {\n    const storedData = localStorage.getItem(\"todoList\");\n    document.querySelector('.to-do_textbox').focus();\n    if (storedData) {\n      setMyarray(JSON.parse(storedData));\n    }\n  }, []);\n\n  // Save data to localStorage whenever myarray changes\n  useEffect(() => {\n    localStorage.setItem(\"todoList\", JSON.stringify(myarray));\n  }, [myarray]);\n  function onChangeDo(event) {\n    setMytext(event.target.value);\n  }\n  function removeAll() {\n    setMyarray([]);\n  }\n  function onClickAdd() {\n    document.querySelector('.to-do_textbox').focus();\n    if (mytext.trim() === \"\") {\n      // Display a warning message or handle the empty text case\n      alert(\"Please enter a value.\");\n      return;\n    }\n\n    // Add the text to the array\n    setMyarray([...myarray, mytext]);\n\n    // Reset text input and edit index\n    setMytext(\"\");\n    setEditIdx(\"\");\n  }\n  function removeItem(index) {\n    const updatedArray = myarray.filter((_, idx) => idx !== index);\n    setMyarray(updatedArray);\n  }\n  function editItem(index) {\n    setMytext(myarray[index]);\n    setEditIdx(index);\n    document.querySelector('.to-do_textbox').focus();\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"center\", {\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"txt\",\n          placeholder: \"Enter something...\",\n          value: mytext,\n          onChange: onChangeDo,\n          autoComplete: \"off\",\n          className: \"to-do_textbox\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"to-do_button\",\n          onClick: onClickAdd,\n          children: \"Add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"to-do_table\",\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: myarray.map((value, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              className: \"to-do_item\",\n              style: {\n                backgroundColor: colors[index % colors.length]\n              },\n              children: [\" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 76,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [index + 1, \". \\xA0\\xA0\", value]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"action_buttons1\",\n                  children: /*#__PURE__*/_jsxDEV(\"img\", {\n                    src: \"Edit.png\",\n                    alt: \"edit\",\n                    title: \"Edit this Text\",\n                    onClick: () => editItem(index),\n                    height: \"20\",\n                    width: \"20\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 82,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 81,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"action_buttons2\",\n                  children: /*#__PURE__*/_jsxDEV(\"img\", {\n                    src: \"Delete.png\",\n                    alt: \"delete\",\n                    title: \"Delete this Text\",\n                    onClick: () => removeItem(index),\n                    height: \"20\",\n                    width: \"20\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 85,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 84,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 80,\n                columnNumber: 19\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"BFj1iEa/Il8k4RS8uFxZXOpjRg0=\");\n_c = App;\nexport default App;\n\n// // App.js\n// import React, { useState, useEffect } from \"react\";\n// import './todo.css';\n\n// function App() {\n//   const [mytext, setMytext] = useState(\"\");\n//   const [myarray, setMyarray] = useState([]);\n//   const [editIdx, setEditIdx] = useState(\"\");\n\n//   // Load data from localStorage on component mount\n//   useEffect(() => {\n//     const storedData = localStorage.getItem(\"todoList\");\n//     document.querySelector('.to-do_textbox').focus();\n//     if (storedData) {\n//       setMyarray(JSON.parse(storedData));\n//     }\n//   }, []);\n\n//   // Save data to localStorage whenever myarray changes\n//   useEffect(() => {\n//     localStorage.setItem(\"todoList\", JSON.stringify(myarray));\n//   }, [myarray]);\n\n//   function onChangeDo(event) {\n//     setMytext(event.target.value);\n//   }\n\n//   function removeAll() {\n//     setMyarray([]);\n//   }\n\n//   function onClickAdd() {\n//     document.querySelector('.to-do_textbox').focus();\n//     if (mytext.trim() === \"\") {\n//       // Display a warning message or handle the empty text case\n//       alert(\"Please enter a value.\");\n//       return;\n//     }\n\n//     // Add the text to the array\n//     setMyarray([...myarray, mytext]);\n\n//     // Reset text input and edit index\n//     setMytext(\"\");\n//     setEditIdx(\"\");\n//   }\n\n//   function removeItem(index) {\n//     const updatedArray = myarray.filter((_, idx) => idx !== index);\n//     setMyarray(updatedArray);\n//   }\n\n//   function editItem(index) {\n//     setMytext(myarray[index]);\n//     setEditIdx(index);\n//     document.querySelector('.to-do_textbox').focus();\n//   }\n\n//   return (\n//     <div className=\"container\">\n//       <center>\n//         <div className=\"input-container\">\n//           <input type=\"search\" name=\"txt\" placeholder=\"Enter something...\" value={mytext} onChange={onChangeDo} autoComplete=\"off\" className=\"to-do_textbox\" />\n//           &nbsp;\n//           <button className=\"add_button\" onClick={onClickAdd} >Add</button>\n//         </div>\n//         <br /><br />\n//         <b>\n//           <table className=\"to-do_table\">\n//             <tbody>\n//               {myarray.map((value, index) => (\n//                 <tr key={index} className=\"to-do_item\">\n//                   <br />\n//                   <td>\n//                     {index + 1}. &nbsp;&nbsp;{value}\n//                   </td>\n//                   <td>\n//                     <span className=\"action_buttons1\">\n//                       <img src=\"Edit.png\" alt=\"edit\" title=\"Edit this Text\" onClick={() => editItem(index)} height=\"20\" width=\"20\" />\n//                     </span>\n//                     <span className=\"action_buttons2\">\n//                       <img src=\"Delete.png\" alt=\"delete\" title=\"Delete this Text\" onClick={() => removeItem(index)} height=\"20\" width=\"20\" />\n//                     </span>\n//                   </td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//           </table>\n//         </b>\n//         <br />\n//         {myarray.length >= 5 && <button onClick={removeAll} className=\"remove-all-button\">Remove All</button>}\n//       </center>\n//     </div>\n//   );\n// }\n\n// export default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","App","mytext","setMytext","myarray","setMyarray","editIdx","setEditIdx","colors","storedData","localStorage","getItem","document","querySelector","focus","JSON","parse","setItem","stringify","onChangeDo","event","target","value","removeAll","onClickAdd","trim","alert","removeItem","index","updatedArray","filter","_","idx","editItem","map","backgroundColor","length"],"sources":["/workspaces/ToDoList/src/App.js"],"sourcesContent":["// App.js\n\nimport React, { useState, useEffect } from \"react\";\nimport './todo.css';\n\nfunction App() {\n  const [mytext, setMytext] = useState(\"\");\n  const [myarray, setMyarray] = useState([]);\n  const [editIdx, setEditIdx] = useState(\"\");\n\n  const colors = [\"lightred\", \"lightgreen\", \"lightblue\", \"lightpink\", \"lightyellow\", \"lightcyan\"]; // Define an array of colors\n\n  // Load data from localStorage on component mount\n  useEffect(() => {\n    const storedData = localStorage.getItem(\"todoList\");\n    document.querySelector('.to-do_textbox').focus();\n    if (storedData) {\n      setMyarray(JSON.parse(storedData));\n    }\n  }, []);\n\n  // Save data to localStorage whenever myarray changes\n  useEffect(() => {\n    localStorage.setItem(\"todoList\", JSON.stringify(myarray));\n  }, [myarray]);\n\n  function onChangeDo(event) {\n    setMytext(event.target.value);\n  }\n\n  function removeAll() {\n    setMyarray([]);\n  }\n\n  function onClickAdd() {\n    document.querySelector('.to-do_textbox').focus();\n    if (mytext.trim() === \"\") {\n      // Display a warning message or handle the empty text case\n      alert(\"Please enter a value.\");\n      return;\n    }\n\n    // Add the text to the array\n    setMyarray([...myarray, mytext]);\n\n    // Reset text input and edit index\n    setMytext(\"\");\n    setEditIdx(\"\");\n  }\n\n  function removeItem(index) {\n    const updatedArray = myarray.filter((_, idx) => idx !== index);\n    setMyarray(updatedArray);\n  }\n\n  function editItem(index) {\n    setMytext(myarray[index]);\n    setEditIdx(index);\n    document.querySelector('.to-do_textbox').focus();\n  }\n\n  return (\n    <div>\n      <center>\n        <br />\n        <div className=\"input-container\">\n          <input type=\"text\" name=\"txt\" placeholder=\"Enter something...\" value={mytext} onChange={onChangeDo} autoComplete=\"off\" className=\"to-do_textbox\" />\n          <button className=\"to-do_button\" onClick={onClickAdd} >Add</button>\n        </div>\n        <br /><br />\n        <b>\n          <table className=\"to-do_table\">\n            <tbody>\n              {myarray.map((value, index) => (\n                <tr key={index} className=\"to-do_item\" style={{ backgroundColor: colors[index % colors.length] }}> {/* Assign background color dynamically */}\n                  <br />\n                  <td>\n                    {index + 1}. &nbsp;&nbsp;{value}\n                  </td>\n                  <td>\n                    <span className=\"action_buttons1\">\n                    <img src=\"Edit.png\" alt=\"edit\" title=\"Edit this Text\" onClick={() => editItem(index)} height=\"20\" width=\"20\" />\n                    </span>\n                    <span className=\"action_buttons2\">\n                    <img src=\"Delete.png\" alt=\"delete\" title=\"Delete this Text\" onClick={() => removeItem(index)} height=\"20\" width=\"20\" />\n                    </span>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </b>\n        <br />\n      </center>\n    </div>\n  );\n}\n\nexport default App;\n\n\n// // App.js\n// import React, { useState, useEffect } from \"react\";\n// import './todo.css';\n\n// function App() {\n//   const [mytext, setMytext] = useState(\"\");\n//   const [myarray, setMyarray] = useState([]);\n//   const [editIdx, setEditIdx] = useState(\"\");\n\n//   // Load data from localStorage on component mount\n//   useEffect(() => {\n//     const storedData = localStorage.getItem(\"todoList\");\n//     document.querySelector('.to-do_textbox').focus();\n//     if (storedData) {\n//       setMyarray(JSON.parse(storedData));\n//     }\n//   }, []);\n\n//   // Save data to localStorage whenever myarray changes\n//   useEffect(() => {\n//     localStorage.setItem(\"todoList\", JSON.stringify(myarray));\n//   }, [myarray]);\n\n//   function onChangeDo(event) {\n//     setMytext(event.target.value);\n//   }\n\n//   function removeAll() {\n//     setMyarray([]);\n//   }\n\n//   function onClickAdd() {\n//     document.querySelector('.to-do_textbox').focus();\n//     if (mytext.trim() === \"\") {\n//       // Display a warning message or handle the empty text case\n//       alert(\"Please enter a value.\");\n//       return;\n//     }\n\n//     // Add the text to the array\n//     setMyarray([...myarray, mytext]);\n\n//     // Reset text input and edit index\n//     setMytext(\"\");\n//     setEditIdx(\"\");\n//   }\n\n//   function removeItem(index) {\n//     const updatedArray = myarray.filter((_, idx) => idx !== index);\n//     setMyarray(updatedArray);\n//   }\n\n//   function editItem(index) {\n//     setMytext(myarray[index]);\n//     setEditIdx(index);\n//     document.querySelector('.to-do_textbox').focus();\n//   }\n\n//   return (\n//     <div className=\"container\">\n//       <center>\n//         <div className=\"input-container\">\n//           <input type=\"search\" name=\"txt\" placeholder=\"Enter something...\" value={mytext} onChange={onChangeDo} autoComplete=\"off\" className=\"to-do_textbox\" />\n//           &nbsp;\n//           <button className=\"add_button\" onClick={onClickAdd} >Add</button>\n//         </div>\n//         <br /><br />\n//         <b>\n//           <table className=\"to-do_table\">\n//             <tbody>\n//               {myarray.map((value, index) => (\n//                 <tr key={index} className=\"to-do_item\">\n//                   <br />\n//                   <td>\n//                     {index + 1}. &nbsp;&nbsp;{value}\n//                   </td>\n//                   <td>\n//                     <span className=\"action_buttons1\">\n//                       <img src=\"Edit.png\" alt=\"edit\" title=\"Edit this Text\" onClick={() => editItem(index)} height=\"20\" width=\"20\" />\n//                     </span>\n//                     <span className=\"action_buttons2\">\n//                       <img src=\"Delete.png\" alt=\"delete\" title=\"Delete this Text\" onClick={() => removeItem(index)} height=\"20\" width=\"20\" />\n//                     </span>\n//                   </td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//           </table>\n//         </b>\n//         <br />\n//         {myarray.length >= 5 && <button onClick={removeAll} className=\"remove-all-button\">Remove All</button>}\n//       </center>\n//     </div>\n//   );\n// }\n\n// export default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}